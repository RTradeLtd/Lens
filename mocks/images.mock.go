// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	sync "sync"

	images "github.com/RTradeLtd/Lens/analyzer/images"
)

type FakeTensorflowAnalyzer struct {
	AnalyzeStub        func(string, []byte) (string, error)
	analyzeMutex       sync.RWMutex
	analyzeArgsForCall []struct {
		arg1 string
		arg2 []byte
	}
	analyzeReturns struct {
		result1 string
		result2 error
	}
	analyzeReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTensorflowAnalyzer) Analyze(arg1 string, arg2 []byte) (string, error) {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.analyzeMutex.Lock()
	ret, specificReturn := fake.analyzeReturnsOnCall[len(fake.analyzeArgsForCall)]
	fake.analyzeArgsForCall = append(fake.analyzeArgsForCall, struct {
		arg1 string
		arg2 []byte
	}{arg1, arg2Copy})
	fake.recordInvocation("Analyze", []interface{}{arg1, arg2Copy})
	fake.analyzeMutex.Unlock()
	if fake.AnalyzeStub != nil {
		return fake.AnalyzeStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.analyzeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTensorflowAnalyzer) AnalyzeCallCount() int {
	fake.analyzeMutex.RLock()
	defer fake.analyzeMutex.RUnlock()
	return len(fake.analyzeArgsForCall)
}

func (fake *FakeTensorflowAnalyzer) AnalyzeCalls(stub func(string, []byte) (string, error)) {
	fake.analyzeMutex.Lock()
	defer fake.analyzeMutex.Unlock()
	fake.AnalyzeStub = stub
}

func (fake *FakeTensorflowAnalyzer) AnalyzeArgsForCall(i int) (string, []byte) {
	fake.analyzeMutex.RLock()
	defer fake.analyzeMutex.RUnlock()
	argsForCall := fake.analyzeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTensorflowAnalyzer) AnalyzeReturns(result1 string, result2 error) {
	fake.analyzeMutex.Lock()
	defer fake.analyzeMutex.Unlock()
	fake.AnalyzeStub = nil
	fake.analyzeReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeTensorflowAnalyzer) AnalyzeReturnsOnCall(i int, result1 string, result2 error) {
	fake.analyzeMutex.Lock()
	defer fake.analyzeMutex.Unlock()
	fake.AnalyzeStub = nil
	if fake.analyzeReturnsOnCall == nil {
		fake.analyzeReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.analyzeReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeTensorflowAnalyzer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.analyzeMutex.RLock()
	defer fake.analyzeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTensorflowAnalyzer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ images.TensorflowAnalyzer = new(FakeTensorflowAnalyzer)
