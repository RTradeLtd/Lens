// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	sync "sync"

	images "github.com/RTradeLtd/Lens/analyzer/images"
)

type FakeTensorflowAnalyzer struct {
	ClassifyStub        func([]byte) (string, error)
	classifyMutex       sync.RWMutex
	classifyArgsForCall []struct {
		arg1 []byte
	}
	classifyReturns struct {
		result1 string
		result2 error
	}
	classifyReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTensorflowAnalyzer) Classify(arg1 []byte) (string, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.classifyMutex.Lock()
	ret, specificReturn := fake.classifyReturnsOnCall[len(fake.classifyArgsForCall)]
	fake.classifyArgsForCall = append(fake.classifyArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	fake.recordInvocation("Classify", []interface{}{arg1Copy})
	fake.classifyMutex.Unlock()
	if fake.ClassifyStub != nil {
		return fake.ClassifyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.classifyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTensorflowAnalyzer) ClassifyCallCount() int {
	fake.classifyMutex.RLock()
	defer fake.classifyMutex.RUnlock()
	return len(fake.classifyArgsForCall)
}

func (fake *FakeTensorflowAnalyzer) ClassifyCalls(stub func([]byte) (string, error)) {
	fake.classifyMutex.Lock()
	defer fake.classifyMutex.Unlock()
	fake.ClassifyStub = stub
}

func (fake *FakeTensorflowAnalyzer) ClassifyArgsForCall(i int) []byte {
	fake.classifyMutex.RLock()
	defer fake.classifyMutex.RUnlock()
	argsForCall := fake.classifyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTensorflowAnalyzer) ClassifyReturns(result1 string, result2 error) {
	fake.classifyMutex.Lock()
	defer fake.classifyMutex.Unlock()
	fake.ClassifyStub = nil
	fake.classifyReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeTensorflowAnalyzer) ClassifyReturnsOnCall(i int, result1 string, result2 error) {
	fake.classifyMutex.Lock()
	defer fake.classifyMutex.Unlock()
	fake.ClassifyStub = nil
	if fake.classifyReturnsOnCall == nil {
		fake.classifyReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.classifyReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeTensorflowAnalyzer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.classifyMutex.RLock()
	defer fake.classifyMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTensorflowAnalyzer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ images.TensorflowAnalyzer = new(FakeTensorflowAnalyzer)
